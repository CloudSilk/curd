// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.3
// source: cell.proto

package curd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Markup       []*CellMarkup     `protobuf:"bytes,2,rep,name=markup,proto3" json:"markup"`
	MustSource   bool              `protobuf:"varint,3,opt,name=mustSource,proto3" json:"mustSource"`
	Height       int32             `protobuf:"varint,4,opt,name=height,proto3" json:"height"`
	Name         string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	System       string            `protobuf:"bytes,6,opt,name=system,proto3" json:"system"`
	DefaultLabel string            `protobuf:"bytes,7,opt,name=defaultLabel,proto3" json:"defaultLabel"`
	View         string            `protobuf:"bytes,8,opt,name=view,proto3" json:"view"`
	Icon         string            `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon"`
	PropertyForm string            `protobuf:"bytes,10,opt,name=propertyForm,proto3" json:"propertyForm"`
	Attrs        []*CellAttrs      `protobuf:"bytes,11,rep,name=attrs,proto3" json:"attrs"`
	IdPrefix     string            `protobuf:"bytes,12,opt,name=idPrefix,proto3" json:"idPrefix"`
	IconSource   int32             `protobuf:"varint,13,opt,name=iconSource,proto3" json:"iconSource"`
	Shape        string            `protobuf:"bytes,14,opt,name=shape,proto3" json:"shape"`
	IsEdge       bool              `protobuf:"varint,15,opt,name=isEdge,proto3" json:"isEdge"`
	Common       bool              `protobuf:"varint,16,opt,name=common,proto3" json:"common"`
	Resizing     bool              `protobuf:"varint,17,opt,name=resizing,proto3" json:"resizing"`
	Group        string            `protobuf:"bytes,18,opt,name=group,proto3" json:"group"`
	MustTarget   bool              `protobuf:"varint,19,opt,name=mustTarget,proto3" json:"mustTarget"`
	Width        int32             `protobuf:"varint,20,opt,name=width,proto3" json:"width"`
	TenantID     string            `protobuf:"bytes,21,opt,name=tenantID,proto3" json:"tenantID"`
	Height2      int32             `protobuf:"varint,22,opt,name=height2,proto3" json:"height2"`
	Width2       int32             `protobuf:"varint,23,opt,name=width2,proto3" json:"width2"`
	Parent       bool              `protobuf:"varint,24,opt,name=parent,proto3" json:"parent"`
	Index        int32             `protobuf:"varint,25,opt,name=index,proto3" json:"index"`
	DefaultEdge  bool              `protobuf:"varint,26,opt,name=defaultEdge,proto3" json:"defaultEdge"`
	Connectings  []*CellConnecting `protobuf:"bytes,27,rep,name=connectings,proto3" json:"connectings"`
	// 其他属性
	Other             string `protobuf:"bytes,28,opt,name=other,proto3" json:"other"`
	DefaultLabelAttrs string `protobuf:"bytes,29,opt,name=defaultLabelAttrs,proto3" json:"defaultLabelAttrs"`
	ProjectID         string `protobuf:"bytes,30,opt,name=projectID,proto3" json:"projectID"`
	Ports             string `protobuf:"bytes,31,opt,name=ports,proto3" json:"ports"`
	// 系统必须要有的数据
	IsMust bool `protobuf:"varint,32,opt,name=isMust,proto3" json:"isMust"`
	// 表单默认值,json格式
	FormDefaultValue string `protobuf:"bytes,33,opt,name=formDefaultValue,proto3" json:"formDefaultValue"`
}

func (x *CellInfo) Reset() {
	*x = CellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellInfo) ProtoMessage() {}

func (x *CellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellInfo.ProtoReflect.Descriptor instead.
func (*CellInfo) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{0}
}

func (x *CellInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CellInfo) GetMarkup() []*CellMarkup {
	if x != nil {
		return x.Markup
	}
	return nil
}

func (x *CellInfo) GetMustSource() bool {
	if x != nil {
		return x.MustSource
	}
	return false
}

func (x *CellInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CellInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellInfo) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *CellInfo) GetDefaultLabel() string {
	if x != nil {
		return x.DefaultLabel
	}
	return ""
}

func (x *CellInfo) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

func (x *CellInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CellInfo) GetPropertyForm() string {
	if x != nil {
		return x.PropertyForm
	}
	return ""
}

func (x *CellInfo) GetAttrs() []*CellAttrs {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *CellInfo) GetIdPrefix() string {
	if x != nil {
		return x.IdPrefix
	}
	return ""
}

func (x *CellInfo) GetIconSource() int32 {
	if x != nil {
		return x.IconSource
	}
	return 0
}

func (x *CellInfo) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *CellInfo) GetIsEdge() bool {
	if x != nil {
		return x.IsEdge
	}
	return false
}

func (x *CellInfo) GetCommon() bool {
	if x != nil {
		return x.Common
	}
	return false
}

func (x *CellInfo) GetResizing() bool {
	if x != nil {
		return x.Resizing
	}
	return false
}

func (x *CellInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *CellInfo) GetMustTarget() bool {
	if x != nil {
		return x.MustTarget
	}
	return false
}

func (x *CellInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CellInfo) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *CellInfo) GetHeight2() int32 {
	if x != nil {
		return x.Height2
	}
	return 0
}

func (x *CellInfo) GetWidth2() int32 {
	if x != nil {
		return x.Width2
	}
	return 0
}

func (x *CellInfo) GetParent() bool {
	if x != nil {
		return x.Parent
	}
	return false
}

func (x *CellInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellInfo) GetDefaultEdge() bool {
	if x != nil {
		return x.DefaultEdge
	}
	return false
}

func (x *CellInfo) GetConnectings() []*CellConnecting {
	if x != nil {
		return x.Connectings
	}
	return nil
}

func (x *CellInfo) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *CellInfo) GetDefaultLabelAttrs() string {
	if x != nil {
		return x.DefaultLabelAttrs
	}
	return ""
}

func (x *CellInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *CellInfo) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *CellInfo) GetIsMust() bool {
	if x != nil {
		return x.IsMust
	}
	return false
}

func (x *CellInfo) GetFormDefaultValue() string {
	if x != nil {
		return x.FormDefaultValue
	}
	return ""
}

type CellMarkup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	TextContent    string `protobuf:"bytes,2,opt,name=textContent,proto3" json:"textContent"`
	CellID         string `protobuf:"bytes,3,opt,name=cellID,proto3" json:"cellID"`
	Other          string `protobuf:"bytes,4,opt,name=other,proto3" json:"other"`
	Children       string `protobuf:"bytes,5,opt,name=children,proto3" json:"children"`
	ClassName      string `protobuf:"bytes,6,opt,name=className,proto3" json:"className"`
	Selector       string `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector"`
	GroupSelector  string `protobuf:"bytes,8,opt,name=groupSelector,proto3" json:"groupSelector"`
	TagName        string `protobuf:"bytes,9,opt,name=tagName,proto3" json:"tagName"`
	Attrs          string `protobuf:"bytes,10,opt,name=attrs,proto3" json:"attrs"`
	Style          string `protobuf:"bytes,11,opt,name=style,proto3" json:"style"`
	Index          int32  `protobuf:"varint,12,opt,name=index,proto3" json:"index"`
	IsDefaultLabel bool   `protobuf:"varint,13,opt,name=isDefaultLabel,proto3" json:"isDefaultLabel"`
}

func (x *CellMarkup) Reset() {
	*x = CellMarkup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMarkup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMarkup) ProtoMessage() {}

func (x *CellMarkup) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMarkup.ProtoReflect.Descriptor instead.
func (*CellMarkup) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{1}
}

func (x *CellMarkup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CellMarkup) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *CellMarkup) GetCellID() string {
	if x != nil {
		return x.CellID
	}
	return ""
}

func (x *CellMarkup) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *CellMarkup) GetChildren() string {
	if x != nil {
		return x.Children
	}
	return ""
}

func (x *CellMarkup) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CellMarkup) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *CellMarkup) GetGroupSelector() string {
	if x != nil {
		return x.GroupSelector
	}
	return ""
}

func (x *CellMarkup) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CellMarkup) GetAttrs() string {
	if x != nil {
		return x.Attrs
	}
	return ""
}

func (x *CellMarkup) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *CellMarkup) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellMarkup) GetIsDefaultLabel() bool {
	if x != nil {
		return x.IsDefaultLabel
	}
	return false
}

type CellAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Stroke             string `protobuf:"bytes,2,opt,name=stroke,proto3" json:"stroke"`
	FontSize           int32  `protobuf:"varint,3,opt,name=fontSize,proto3" json:"fontSize"`
	Other              string `protobuf:"bytes,4,opt,name=other,proto3" json:"other"`
	TextAnchor         string `protobuf:"bytes,5,opt,name=textAnchor,proto3" json:"textAnchor"`
	Name               string `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`
	Fill               string `protobuf:"bytes,7,opt,name=fill,proto3" json:"fill"`
	Ref                string `protobuf:"bytes,8,opt,name=ref,proto3" json:"ref"`
	Magnet             bool   `protobuf:"varint,9,opt,name=magnet,proto3" json:"magnet"`
	TextVerticalAnchor string `protobuf:"bytes,10,opt,name=textVerticalAnchor,proto3" json:"textVerticalAnchor"`
	CellID             string `protobuf:"bytes,11,opt,name=cellID,proto3" json:"cellID"`
	SelectedFill       string `protobuf:"bytes,12,opt,name=selectedFill,proto3" json:"selectedFill"`
	SelectedStroke     string `protobuf:"bytes,13,opt,name=selectedStroke,proto3" json:"selectedStroke"`
	IsDefaultLabel     bool   `protobuf:"varint,14,opt,name=isDefaultLabel,proto3" json:"isDefaultLabel"`
	LinkHref           string `protobuf:"bytes,15,opt,name=linkHref,proto3" json:"linkHref"`
}

func (x *CellAttrs) Reset() {
	*x = CellAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAttrs) ProtoMessage() {}

func (x *CellAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAttrs.ProtoReflect.Descriptor instead.
func (*CellAttrs) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{2}
}

func (x *CellAttrs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CellAttrs) GetStroke() string {
	if x != nil {
		return x.Stroke
	}
	return ""
}

func (x *CellAttrs) GetFontSize() int32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *CellAttrs) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *CellAttrs) GetTextAnchor() string {
	if x != nil {
		return x.TextAnchor
	}
	return ""
}

func (x *CellAttrs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellAttrs) GetFill() string {
	if x != nil {
		return x.Fill
	}
	return ""
}

func (x *CellAttrs) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *CellAttrs) GetMagnet() bool {
	if x != nil {
		return x.Magnet
	}
	return false
}

func (x *CellAttrs) GetTextVerticalAnchor() string {
	if x != nil {
		return x.TextVerticalAnchor
	}
	return ""
}

func (x *CellAttrs) GetCellID() string {
	if x != nil {
		return x.CellID
	}
	return ""
}

func (x *CellAttrs) GetSelectedFill() string {
	if x != nil {
		return x.SelectedFill
	}
	return ""
}

func (x *CellAttrs) GetSelectedStroke() string {
	if x != nil {
		return x.SelectedStroke
	}
	return ""
}

func (x *CellAttrs) GetIsDefaultLabel() bool {
	if x != nil {
		return x.IsDefaultLabel
	}
	return false
}

func (x *CellAttrs) GetLinkHref() string {
	if x != nil {
		return x.LinkHref
	}
	return ""
}

type CellConnecting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	CellID      string `protobuf:"bytes,2,opt,name=cellID,proto3" json:"cellID"`
	AnotherCell string `protobuf:"bytes,3,opt,name=anotherCell,proto3" json:"anotherCell"`
	Edge        string `protobuf:"bytes,4,opt,name=edge,proto3" json:"edge"`
	Direct      int32  `protobuf:"varint,5,opt,name=direct,proto3" json:"direct"`
}

func (x *CellConnecting) Reset() {
	*x = CellConnecting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellConnecting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellConnecting) ProtoMessage() {}

func (x *CellConnecting) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellConnecting.ProtoReflect.Descriptor instead.
func (*CellConnecting) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{3}
}

func (x *CellConnecting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CellConnecting) GetCellID() string {
	if x != nil {
		return x.CellID
	}
	return ""
}

func (x *CellConnecting) GetAnotherCell() string {
	if x != nil {
		return x.AnotherCell
	}
	return ""
}

func (x *CellConnecting) GetEdge() string {
	if x != nil {
		return x.Edge
	}
	return ""
}

func (x *CellConnecting) GetDirect() int32 {
	if x != nil {
		return x.Direct
	}
	return 0
}

type QueryCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: uri:"pageIndex" form:"pageIndex"
	PageIndex int64 `protobuf:"varint,1,opt,name=pageIndex,proto3" json:"pageIndex" uri:"pageIndex" form:"pageIndex"`
	// @inject_tag: uri:"pageSize" form:"pageSize"
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize" uri:"pageSize" form:"pageSize"`
	// @inject_tag: uri:"orderField" form:"orderField"
	OrderField string `protobuf:"bytes,3,opt,name=orderField,proto3" json:"orderField" uri:"orderField" form:"orderField"`
	// @inject_tag: uri:"desc" form:"desc"
	Desc bool `protobuf:"varint,4,opt,name=desc,proto3" json:"desc" uri:"desc" form:"desc"`
	// @inject_tag: uri:"mustSource" form:"mustSource"
	MustSource bool `protobuf:"varint,5,opt,name=mustSource,proto3" json:"mustSource" uri:"mustSource" form:"mustSource"`
	// @inject_tag: uri:"name" form:"name"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name" uri:"name" form:"name"`
	// @inject_tag: uri:"system" form:"system"
	System string `protobuf:"bytes,7,opt,name=system,proto3" json:"system" uri:"system" form:"system"`
	// @inject_tag: uri:"view" form:"view"
	View string `protobuf:"bytes,8,opt,name=view,proto3" json:"view" uri:"view" form:"view"`
	// @inject_tag: uri:"shape" form:"shape"
	Shape string `protobuf:"bytes,9,opt,name=shape,proto3" json:"shape" uri:"shape" form:"shape"`
	// @inject_tag: uri:"isEdge" form:"isEdge"
	IsEdge int32 `protobuf:"varint,10,opt,name=isEdge,proto3" json:"isEdge" uri:"isEdge" form:"isEdge"`
	// @inject_tag: uri:"common" form:"common"
	Common bool `protobuf:"varint,11,opt,name=common,proto3" json:"common" uri:"common" form:"common"`
	// @inject_tag: uri:"resizing" form:"resizing"
	Resizing bool `protobuf:"varint,12,opt,name=resizing,proto3" json:"resizing" uri:"resizing" form:"resizing"`
	// @inject_tag: uri:"group" form:"group"
	Group string `protobuf:"bytes,13,opt,name=group,proto3" json:"group" uri:"group" form:"group"`
	// @inject_tag: uri:"mustTarget" form:"mustTarget"
	MustTarget bool `protobuf:"varint,14,opt,name=mustTarget,proto3" json:"mustTarget" uri:"mustTarget" form:"mustTarget"`
	// @inject_tag: uri:"tenantID" form:"tenantID"
	TenantID string `protobuf:"bytes,15,opt,name=tenantID,proto3" json:"tenantID" uri:"tenantID" form:"tenantID"`
	// @inject_tag: uri:"projectID" form:"projectID"
	ProjectID string `protobuf:"bytes,16,opt,name=projectID,proto3" json:"projectID" uri:"projectID" form:"projectID"`
}

func (x *QueryCellRequest) Reset() {
	*x = QueryCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCellRequest) ProtoMessage() {}

func (x *QueryCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCellRequest.ProtoReflect.Descriptor instead.
func (*QueryCellRequest) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCellRequest) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *QueryCellRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCellRequest) GetOrderField() string {
	if x != nil {
		return x.OrderField
	}
	return ""
}

func (x *QueryCellRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *QueryCellRequest) GetMustSource() bool {
	if x != nil {
		return x.MustSource
	}
	return false
}

func (x *QueryCellRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryCellRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *QueryCellRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

func (x *QueryCellRequest) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *QueryCellRequest) GetIsEdge() int32 {
	if x != nil {
		return x.IsEdge
	}
	return 0
}

func (x *QueryCellRequest) GetCommon() bool {
	if x != nil {
		return x.Common
	}
	return false
}

func (x *QueryCellRequest) GetResizing() bool {
	if x != nil {
		return x.Resizing
	}
	return false
}

func (x *QueryCellRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryCellRequest) GetMustTarget() bool {
	if x != nil {
		return x.MustTarget
	}
	return false
}

func (x *QueryCellRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *QueryCellRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type QueryCellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code        `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    []*CellInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
	Pages   int64       `protobuf:"varint,4,opt,name=pages,proto3" json:"pages"`
	Records int64       `protobuf:"varint,5,opt,name=records,proto3" json:"records"`
	Total   int64       `protobuf:"varint,6,opt,name=total,proto3" json:"total"`
}

func (x *QueryCellResponse) Reset() {
	*x = QueryCellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCellResponse) ProtoMessage() {}

func (x *QueryCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCellResponse.ProtoReflect.Descriptor instead.
func (*QueryCellResponse) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{5}
}

func (x *QueryCellResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *QueryCellResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryCellResponse) GetData() []*CellInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryCellResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *QueryCellResponse) GetRecords() int64 {
	if x != nil {
		return x.Records
	}
	return 0
}

func (x *QueryCellResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAllCellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code        `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    []*CellInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetAllCellResponse) Reset() {
	*x = GetAllCellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCellResponse) ProtoMessage() {}

func (x *GetAllCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCellResponse.ProtoReflect.Descriptor instead.
func (*GetAllCellResponse) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllCellResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *GetAllCellResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAllCellResponse) GetData() []*CellInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCellDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code      `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    *CellInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetCellDetailResponse) Reset() {
	*x = GetCellDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellDetailResponse) ProtoMessage() {}

func (x *GetCellDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCellDetailResponse) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{7}
}

func (x *GetCellDetailResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *GetCellDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCellDetailResponse) GetData() *CellInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAllCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: uri:"system" form:"system"
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system" uri:"system" form:"system"`
	// @inject_tag: uri:"tenantID" form:"tenantID"
	TenantID string `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID" uri:"tenantID" form:"tenantID"`
	// @inject_tag: uri:"projectID" form:"projectID"
	ProjectID string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID" uri:"projectID" form:"projectID"`
}

func (x *GetAllCellRequest) Reset() {
	*x = GetAllCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cell_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCellRequest) ProtoMessage() {}

func (x *GetAllCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cell_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCellRequest.ProtoReflect.Descriptor instead.
func (*GetAllCellRequest) Descriptor() ([]byte, []int) {
	return file_cell_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllCellRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *GetAllCellRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *GetAllCellRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

var File_cell_proto protoreflect.FileDescriptor

var file_cell_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x75,
	0x72, 0x64, 0x1a, 0x11, 0x63, 0x75, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x07, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x25, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45,
	0x64, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x75, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x75, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x64, 0x74, 0x68, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x64, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0xaf, 0x03, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x78, 0x74, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65,
	0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x48, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x48, 0x72, 0x65, 0x66, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0xb2, 0x03,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75,
	0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x72, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72,
	0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x32, 0xc9,
	0x03, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0e,
	0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x14,
	0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x10, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x75, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x75,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x43,
	0x6f, 0x70, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75,
	0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x2e,
	0x63, 0x75, 0x72, 0x64, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x0a, 0x0d, 0x63, 0x6e,
	0x2e, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x42, 0x09, 0x43, 0x65, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x63, 0x75, 0x72,
	0x64, 0xa2, 0x02, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x52, 0x56, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cell_proto_rawDescOnce sync.Once
	file_cell_proto_rawDescData = file_cell_proto_rawDesc
)

func file_cell_proto_rawDescGZIP() []byte {
	file_cell_proto_rawDescOnce.Do(func() {
		file_cell_proto_rawDescData = protoimpl.X.CompressGZIP(file_cell_proto_rawDescData)
	})
	return file_cell_proto_rawDescData
}

var file_cell_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cell_proto_goTypes = []interface{}{
	(*CellInfo)(nil),              // 0: curd.CellInfo
	(*CellMarkup)(nil),            // 1: curd.CellMarkup
	(*CellAttrs)(nil),             // 2: curd.CellAttrs
	(*CellConnecting)(nil),        // 3: curd.CellConnecting
	(*QueryCellRequest)(nil),      // 4: curd.QueryCellRequest
	(*QueryCellResponse)(nil),     // 5: curd.QueryCellResponse
	(*GetAllCellResponse)(nil),    // 6: curd.GetAllCellResponse
	(*GetCellDetailResponse)(nil), // 7: curd.GetCellDetailResponse
	(*GetAllCellRequest)(nil),     // 8: curd.GetAllCellRequest
	(Code)(0),                     // 9: curd.Code
	(*DelRequest)(nil),            // 10: curd.DelRequest
	(*GetDetailRequest)(nil),      // 11: curd.GetDetailRequest
	(*EnableRequest)(nil),         // 12: curd.EnableRequest
	(*CommonResponse)(nil),        // 13: curd.CommonResponse
}
var file_cell_proto_depIdxs = []int32{
	1,  // 0: curd.CellInfo.markup:type_name -> curd.CellMarkup
	2,  // 1: curd.CellInfo.attrs:type_name -> curd.CellAttrs
	3,  // 2: curd.CellInfo.connectings:type_name -> curd.CellConnecting
	9,  // 3: curd.QueryCellResponse.code:type_name -> curd.Code
	0,  // 4: curd.QueryCellResponse.data:type_name -> curd.CellInfo
	9,  // 5: curd.GetAllCellResponse.code:type_name -> curd.Code
	0,  // 6: curd.GetAllCellResponse.data:type_name -> curd.CellInfo
	9,  // 7: curd.GetCellDetailResponse.code:type_name -> curd.Code
	0,  // 8: curd.GetCellDetailResponse.data:type_name -> curd.CellInfo
	0,  // 9: curd.Cell.Add:input_type -> curd.CellInfo
	0,  // 10: curd.Cell.Update:input_type -> curd.CellInfo
	10, // 11: curd.Cell.Delete:input_type -> curd.DelRequest
	4,  // 12: curd.Cell.Query:input_type -> curd.QueryCellRequest
	8,  // 13: curd.Cell.GetAll:input_type -> curd.GetAllCellRequest
	11, // 14: curd.Cell.GetDetail:input_type -> curd.GetDetailRequest
	11, // 15: curd.Cell.Copy:input_type -> curd.GetDetailRequest
	12, // 16: curd.Cell.Enable:input_type -> curd.EnableRequest
	13, // 17: curd.Cell.Add:output_type -> curd.CommonResponse
	13, // 18: curd.Cell.Update:output_type -> curd.CommonResponse
	13, // 19: curd.Cell.Delete:output_type -> curd.CommonResponse
	5,  // 20: curd.Cell.Query:output_type -> curd.QueryCellResponse
	6,  // 21: curd.Cell.GetAll:output_type -> curd.GetAllCellResponse
	7,  // 22: curd.Cell.GetDetail:output_type -> curd.GetCellDetailResponse
	13, // 23: curd.Cell.Copy:output_type -> curd.CommonResponse
	13, // 24: curd.Cell.Enable:output_type -> curd.CommonResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cell_proto_init() }
func file_cell_proto_init() {
	if File_cell_proto != nil {
		return
	}
	file_curd_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMarkup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellConnecting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCellDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cell_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cell_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cell_proto_goTypes,
		DependencyIndexes: file_cell_proto_depIdxs,
		MessageInfos:      file_cell_proto_msgTypes,
	}.Build()
	File_cell_proto = out.File
	file_cell_proto_rawDesc = nil
	file_cell_proto_goTypes = nil
	file_cell_proto_depIdxs = nil
}
