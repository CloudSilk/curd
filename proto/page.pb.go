// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.3
// source: page.proto

package curd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                     string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Enable                   bool          `protobuf:"varint,3,opt,name=enable,proto3" json:"enable"`
	MetadataID               string        `protobuf:"bytes,4,opt,name=metadataID,proto3" json:"metadataID"`
	PageSize                 uint32        `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize"`
	Editable                 string        `protobuf:"bytes,6,opt,name=editable,proto3" json:"editable"`
	ShowIndex                bool          `protobuf:"varint,7,opt,name=showIndex,proto3" json:"showIndex"`
	ShowSelection            bool          `protobuf:"varint,39,opt,name=showSelection,proto3" json:"showSelection"`
	ToolBar                  *PageToolBar  `protobuf:"bytes,8,opt,name=toolBar,proto3" json:"toolBar"`
	Fields                   []*PageField  `protobuf:"bytes,9,rep,name=fields,proto3" json:"fields"`
	Path                     string        `protobuf:"bytes,10,opt,name=path,proto3" json:"path"`
	Title                    string        `protobuf:"bytes,11,opt,name=title,proto3" json:"title"`
	Description              string        `protobuf:"bytes,12,opt,name=description,proto3" json:"description"`
	SearchDefaultValue       string        `protobuf:"bytes,13,opt,name=searchDefaultValue,proto3" json:"searchDefaultValue"`
	EditFormID               string        `protobuf:"bytes,14,opt,name=editFormID,proto3" json:"editFormID"`
	SearchFormID             string        `protobuf:"bytes,15,opt,name=searchFormID,proto3" json:"searchFormID"`
	AddFormID                string        `protobuf:"bytes,16,opt,name=addFormID,proto3" json:"addFormID"`
	ViewFormID               string        `protobuf:"bytes,17,opt,name=viewFormID,proto3" json:"viewFormID"`
	Type                     int32         `protobuf:"varint,18,opt,name=type,proto3" json:"type"`
	SubmitBefore             string        `protobuf:"bytes,19,opt,name=submitBefore,proto3" json:"submitBefore"`
	SubmitAfter              string        `protobuf:"bytes,20,opt,name=submitAfter,proto3" json:"submitAfter"`
	LoadDetailBefore         string        `protobuf:"bytes,21,opt,name=loadDetailBefore,proto3" json:"loadDetailBefore"`
	LoadDetailAfter          string        `protobuf:"bytes,22,opt,name=loadDetailAfter,proto3" json:"loadDetailAfter"`
	QueryBefore              string        `protobuf:"bytes,23,opt,name=queryBefore,proto3" json:"queryBefore"`
	QueryAfter               string        `protobuf:"bytes,24,opt,name=queryAfter,proto3" json:"queryAfter"`
	ListAvatarField          string        `protobuf:"bytes,25,opt,name=listAvatarField,proto3" json:"listAvatarField"`
	ListTitleField           string        `protobuf:"bytes,26,opt,name=listTitleField,proto3" json:"listTitleField"`
	ListDescriptionField     string        `protobuf:"bytes,27,opt,name=listDescriptionField,proto3" json:"listDescriptionField"`
	ListContentField         string        `protobuf:"bytes,28,opt,name=listContentField,proto3" json:"listContentField"`
	ListLoadType             int32         `protobuf:"varint,29,opt,name=listLoadType,proto3" json:"listLoadType"`
	ListKeyField             string        `protobuf:"bytes,85,opt,name=listKeyField,proto3" json:"listKeyField"`
	CardAvatarField          string        `protobuf:"bytes,30,opt,name=cardAvatarField,proto3" json:"cardAvatarField"`
	CardTitleField           string        `protobuf:"bytes,31,opt,name=cardTitleField,proto3" json:"cardTitleField"`
	CardDescriptionField     string        `protobuf:"bytes,32,opt,name=cardDescriptionField,proto3" json:"cardDescriptionField"`
	CardContentField         string        `protobuf:"bytes,33,opt,name=cardContentField,proto3" json:"cardContentField"`
	CardLoadType             int32         `protobuf:"varint,34,opt,name=cardLoadType,proto3" json:"cardLoadType"`
	CardImageField           string        `protobuf:"bytes,35,opt,name=cardImageField,proto3" json:"cardImageField"`
	Buttons                  []*PageButton `protobuf:"bytes,36,rep,name=buttons,proto3" json:"buttons"`
	CreatedAt                int64         `protobuf:"varint,37,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt                int64         `protobuf:"varint,38,opt,name=updatedAt,proto3" json:"updatedAt"`
	ProListGhost             bool          `protobuf:"varint,40,opt,name=proListGhost,proto3" json:"proListGhost"`
	ProListCardActionProps   string        `protobuf:"bytes,41,opt,name=proListCardActionProps,proto3" json:"proListCardActionProps"`
	ProListShowTitle         bool          `protobuf:"varint,42,opt,name=proListShowTitle,proto3" json:"proListShowTitle"`
	ProListTitleDataIndex    string        `protobuf:"bytes,43,opt,name=proListTitleDataIndex,proto3" json:"proListTitleDataIndex"`
	ProListTitleValueType    string        `protobuf:"bytes,44,opt,name=proListTitleValueType,proto3" json:"proListTitleValueType"`
	ProListTitleRender       string        `protobuf:"bytes,45,opt,name=proListTitleRender,proto3" json:"proListTitleRender"`
	ProListShowSubTitle      bool          `protobuf:"varint,46,opt,name=proListShowSubTitle,proto3" json:"proListShowSubTitle"`
	ProListSubTitleDataIndex string        `protobuf:"bytes,47,opt,name=proListSubTitleDataIndex,proto3" json:"proListSubTitleDataIndex"`
	ProListSubTitleValueType string        `protobuf:"bytes,48,opt,name=proListSubTitleValueType,proto3" json:"proListSubTitleValueType"`
	ProListSubTitleRender    string        `protobuf:"bytes,49,opt,name=proListSubTitleRender,proto3" json:"proListSubTitleRender"`
	ProListShowMetaType      bool          `protobuf:"varint,50,opt,name=proListShowMetaType,proto3" json:"proListShowMetaType"`
	ProListTypeDataIndex     string        `protobuf:"bytes,51,opt,name=proListTypeDataIndex,proto3" json:"proListTypeDataIndex"`
	ProListTypeValueType     string        `protobuf:"bytes,52,opt,name=proListTypeValueType,proto3" json:"proListTypeValueType"`
	ProListTypeRender        string        `protobuf:"bytes,53,opt,name=proListTypeRender,proto3" json:"proListTypeRender"`
	ProListShowAvatar        bool          `protobuf:"varint,54,opt,name=proListShowAvatar,proto3" json:"proListShowAvatar"`
	ProListAvatarDataIndex   string        `protobuf:"bytes,55,opt,name=proListAvatarDataIndex,proto3" json:"proListAvatarDataIndex"`
	ProListAvatarValueType   string        `protobuf:"bytes,56,opt,name=proListAvatarValueType,proto3" json:"proListAvatarValueType"`
	ProListAvatarRender      string        `protobuf:"bytes,57,opt,name=proListAvatarRender,proto3" json:"proListAvatarRender"`
	ProListShowContent       bool          `protobuf:"varint,58,opt,name=proListShowContent,proto3" json:"proListShowContent"`
	ProListContentDataIndex  string        `protobuf:"bytes,59,opt,name=proListContentDataIndex,proto3" json:"proListContentDataIndex"`
	ProListContentValueType  string        `protobuf:"bytes,60,opt,name=proListContentValueType,proto3" json:"proListContentValueType"`
	ProListContentRender     string        `protobuf:"bytes,61,opt,name=proListContentRender,proto3" json:"proListContentRender"`
	ProListShowMetaExtra     bool          `protobuf:"varint,62,opt,name=proListShowMetaExtra,proto3" json:"proListShowMetaExtra"`
	ProListExtraDataIndex    string        `protobuf:"bytes,63,opt,name=proListExtraDataIndex,proto3" json:"proListExtraDataIndex"`
	ProListExtraValueType    string        `protobuf:"bytes,64,opt,name=proListExtraValueType,proto3" json:"proListExtraValueType"`
	ProListExtraRender       string        `protobuf:"bytes,65,opt,name=proListExtraRender,proto3" json:"proListExtraRender"`
	ProListShowActions       string        `protobuf:"bytes,66,opt,name=proListShowActions,proto3" json:"proListShowActions"`
	ProListShowType          int32         `protobuf:"varint,67,opt,name=proListShowType,proto3" json:"proListShowType"`
	ProListShowExtra         string        `protobuf:"bytes,68,opt,name=proListShowExtra,proto3" json:"proListShowExtra"`
	ProListItemClick         string        `protobuf:"bytes,69,opt,name=proListItemClick,proto3" json:"proListItemClick"`
	ProListItemMouseEnter    string        `protobuf:"bytes,70,opt,name=proListItemMouseEnter,proto3" json:"proListItemMouseEnter"`
	ListGridTypeGutter       int32         `protobuf:"varint,71,opt,name=listGridTypeGutter,proto3" json:"listGridTypeGutter"`
	ListGridTypeColumn       int32         `protobuf:"varint,72,opt,name=listGridTypeColumn,proto3" json:"listGridTypeColumn"`
	ListItemLayout           string        `protobuf:"bytes,73,opt,name=listItemLayout,proto3" json:"listItemLayout"`
	ListExpandable           bool          `protobuf:"varint,74,opt,name=listExpandable,proto3" json:"listExpandable"`
	ProjectID                string        `protobuf:"bytes,75,opt,name=projectID,proto3" json:"projectID"`
	TenantID                 string        `protobuf:"bytes,76,opt,name=tenantID,proto3" json:"tenantID"`
	AddDefaultValue          string        `protobuf:"bytes,77,opt,name=addDefaultValue,proto3" json:"addDefaultValue"`
	LabelField               string        `protobuf:"bytes,78,opt,name=labelField,proto3" json:"labelField"`
	ValueField               string        `protobuf:"bytes,79,opt,name=valueField,proto3" json:"valueField"`
	ScrollX                  int32         `protobuf:"varint,80,opt,name=scrollX,proto3" json:"scrollX"`
	//系统必须要有的数据
	IsMust bool `protobuf:"varint,81,opt,name=isMust,proto3" json:"isMust"`
	//子列表，应用于左右分栏
	IsChild bool `protobuf:"varint,82,opt,name=isChild,proto3" json:"isChild"`
	//子列表的PageName,多个使用逗号隔开，应用于左右分栏等
	Pages    string `protobuf:"bytes,83,opt,name=pages,proto3" json:"pages"`
	Bordered bool   `protobuf:"varint,84,opt,name=bordered,proto3" json:"bordered"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PageInfo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PageInfo) GetMetadataID() string {
	if x != nil {
		return x.MetadataID
	}
	return ""
}

func (x *PageInfo) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageInfo) GetEditable() string {
	if x != nil {
		return x.Editable
	}
	return ""
}

func (x *PageInfo) GetShowIndex() bool {
	if x != nil {
		return x.ShowIndex
	}
	return false
}

func (x *PageInfo) GetShowSelection() bool {
	if x != nil {
		return x.ShowSelection
	}
	return false
}

func (x *PageInfo) GetToolBar() *PageToolBar {
	if x != nil {
		return x.ToolBar
	}
	return nil
}

func (x *PageInfo) GetFields() []*PageField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PageInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PageInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PageInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PageInfo) GetSearchDefaultValue() string {
	if x != nil {
		return x.SearchDefaultValue
	}
	return ""
}

func (x *PageInfo) GetEditFormID() string {
	if x != nil {
		return x.EditFormID
	}
	return ""
}

func (x *PageInfo) GetSearchFormID() string {
	if x != nil {
		return x.SearchFormID
	}
	return ""
}

func (x *PageInfo) GetAddFormID() string {
	if x != nil {
		return x.AddFormID
	}
	return ""
}

func (x *PageInfo) GetViewFormID() string {
	if x != nil {
		return x.ViewFormID
	}
	return ""
}

func (x *PageInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PageInfo) GetSubmitBefore() string {
	if x != nil {
		return x.SubmitBefore
	}
	return ""
}

func (x *PageInfo) GetSubmitAfter() string {
	if x != nil {
		return x.SubmitAfter
	}
	return ""
}

func (x *PageInfo) GetLoadDetailBefore() string {
	if x != nil {
		return x.LoadDetailBefore
	}
	return ""
}

func (x *PageInfo) GetLoadDetailAfter() string {
	if x != nil {
		return x.LoadDetailAfter
	}
	return ""
}

func (x *PageInfo) GetQueryBefore() string {
	if x != nil {
		return x.QueryBefore
	}
	return ""
}

func (x *PageInfo) GetQueryAfter() string {
	if x != nil {
		return x.QueryAfter
	}
	return ""
}

func (x *PageInfo) GetListAvatarField() string {
	if x != nil {
		return x.ListAvatarField
	}
	return ""
}

func (x *PageInfo) GetListTitleField() string {
	if x != nil {
		return x.ListTitleField
	}
	return ""
}

func (x *PageInfo) GetListDescriptionField() string {
	if x != nil {
		return x.ListDescriptionField
	}
	return ""
}

func (x *PageInfo) GetListContentField() string {
	if x != nil {
		return x.ListContentField
	}
	return ""
}

func (x *PageInfo) GetListLoadType() int32 {
	if x != nil {
		return x.ListLoadType
	}
	return 0
}

func (x *PageInfo) GetListKeyField() string {
	if x != nil {
		return x.ListKeyField
	}
	return ""
}

func (x *PageInfo) GetCardAvatarField() string {
	if x != nil {
		return x.CardAvatarField
	}
	return ""
}

func (x *PageInfo) GetCardTitleField() string {
	if x != nil {
		return x.CardTitleField
	}
	return ""
}

func (x *PageInfo) GetCardDescriptionField() string {
	if x != nil {
		return x.CardDescriptionField
	}
	return ""
}

func (x *PageInfo) GetCardContentField() string {
	if x != nil {
		return x.CardContentField
	}
	return ""
}

func (x *PageInfo) GetCardLoadType() int32 {
	if x != nil {
		return x.CardLoadType
	}
	return 0
}

func (x *PageInfo) GetCardImageField() string {
	if x != nil {
		return x.CardImageField
	}
	return ""
}

func (x *PageInfo) GetButtons() []*PageButton {
	if x != nil {
		return x.Buttons
	}
	return nil
}

func (x *PageInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PageInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PageInfo) GetProListGhost() bool {
	if x != nil {
		return x.ProListGhost
	}
	return false
}

func (x *PageInfo) GetProListCardActionProps() string {
	if x != nil {
		return x.ProListCardActionProps
	}
	return ""
}

func (x *PageInfo) GetProListShowTitle() bool {
	if x != nil {
		return x.ProListShowTitle
	}
	return false
}

func (x *PageInfo) GetProListTitleDataIndex() string {
	if x != nil {
		return x.ProListTitleDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListTitleValueType() string {
	if x != nil {
		return x.ProListTitleValueType
	}
	return ""
}

func (x *PageInfo) GetProListTitleRender() string {
	if x != nil {
		return x.ProListTitleRender
	}
	return ""
}

func (x *PageInfo) GetProListShowSubTitle() bool {
	if x != nil {
		return x.ProListShowSubTitle
	}
	return false
}

func (x *PageInfo) GetProListSubTitleDataIndex() string {
	if x != nil {
		return x.ProListSubTitleDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListSubTitleValueType() string {
	if x != nil {
		return x.ProListSubTitleValueType
	}
	return ""
}

func (x *PageInfo) GetProListSubTitleRender() string {
	if x != nil {
		return x.ProListSubTitleRender
	}
	return ""
}

func (x *PageInfo) GetProListShowMetaType() bool {
	if x != nil {
		return x.ProListShowMetaType
	}
	return false
}

func (x *PageInfo) GetProListTypeDataIndex() string {
	if x != nil {
		return x.ProListTypeDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListTypeValueType() string {
	if x != nil {
		return x.ProListTypeValueType
	}
	return ""
}

func (x *PageInfo) GetProListTypeRender() string {
	if x != nil {
		return x.ProListTypeRender
	}
	return ""
}

func (x *PageInfo) GetProListShowAvatar() bool {
	if x != nil {
		return x.ProListShowAvatar
	}
	return false
}

func (x *PageInfo) GetProListAvatarDataIndex() string {
	if x != nil {
		return x.ProListAvatarDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListAvatarValueType() string {
	if x != nil {
		return x.ProListAvatarValueType
	}
	return ""
}

func (x *PageInfo) GetProListAvatarRender() string {
	if x != nil {
		return x.ProListAvatarRender
	}
	return ""
}

func (x *PageInfo) GetProListShowContent() bool {
	if x != nil {
		return x.ProListShowContent
	}
	return false
}

func (x *PageInfo) GetProListContentDataIndex() string {
	if x != nil {
		return x.ProListContentDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListContentValueType() string {
	if x != nil {
		return x.ProListContentValueType
	}
	return ""
}

func (x *PageInfo) GetProListContentRender() string {
	if x != nil {
		return x.ProListContentRender
	}
	return ""
}

func (x *PageInfo) GetProListShowMetaExtra() bool {
	if x != nil {
		return x.ProListShowMetaExtra
	}
	return false
}

func (x *PageInfo) GetProListExtraDataIndex() string {
	if x != nil {
		return x.ProListExtraDataIndex
	}
	return ""
}

func (x *PageInfo) GetProListExtraValueType() string {
	if x != nil {
		return x.ProListExtraValueType
	}
	return ""
}

func (x *PageInfo) GetProListExtraRender() string {
	if x != nil {
		return x.ProListExtraRender
	}
	return ""
}

func (x *PageInfo) GetProListShowActions() string {
	if x != nil {
		return x.ProListShowActions
	}
	return ""
}

func (x *PageInfo) GetProListShowType() int32 {
	if x != nil {
		return x.ProListShowType
	}
	return 0
}

func (x *PageInfo) GetProListShowExtra() string {
	if x != nil {
		return x.ProListShowExtra
	}
	return ""
}

func (x *PageInfo) GetProListItemClick() string {
	if x != nil {
		return x.ProListItemClick
	}
	return ""
}

func (x *PageInfo) GetProListItemMouseEnter() string {
	if x != nil {
		return x.ProListItemMouseEnter
	}
	return ""
}

func (x *PageInfo) GetListGridTypeGutter() int32 {
	if x != nil {
		return x.ListGridTypeGutter
	}
	return 0
}

func (x *PageInfo) GetListGridTypeColumn() int32 {
	if x != nil {
		return x.ListGridTypeColumn
	}
	return 0
}

func (x *PageInfo) GetListItemLayout() string {
	if x != nil {
		return x.ListItemLayout
	}
	return ""
}

func (x *PageInfo) GetListExpandable() bool {
	if x != nil {
		return x.ListExpandable
	}
	return false
}

func (x *PageInfo) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *PageInfo) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *PageInfo) GetAddDefaultValue() string {
	if x != nil {
		return x.AddDefaultValue
	}
	return ""
}

func (x *PageInfo) GetLabelField() string {
	if x != nil {
		return x.LabelField
	}
	return ""
}

func (x *PageInfo) GetValueField() string {
	if x != nil {
		return x.ValueField
	}
	return ""
}

func (x *PageInfo) GetScrollX() int32 {
	if x != nil {
		return x.ScrollX
	}
	return 0
}

func (x *PageInfo) GetIsMust() bool {
	if x != nil {
		return x.IsMust
	}
	return false
}

func (x *PageInfo) GetIsChild() bool {
	if x != nil {
		return x.IsChild
	}
	return false
}

func (x *PageInfo) GetPages() string {
	if x != nil {
		return x.Pages
	}
	return ""
}

func (x *PageInfo) GetBordered() bool {
	if x != nil {
		return x.Bordered
	}
	return false
}

type PageToolBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PageID string `protobuf:"bytes,2,opt,name=pageID,proto3" json:"pageID"`
	//是否显示全屏按钮
	FullScreen bool `protobuf:"varint,3,opt,name=fullScreen,proto3" json:"fullScreen"`
	//是否显示刷新按钮
	Reload bool `protobuf:"varint,4,opt,name=reload,proto3" json:"reload"`
	//是否显示设置按钮
	Setting bool `protobuf:"varint,5,opt,name=setting,proto3" json:"setting"`
	//
	Render string `protobuf:"bytes,6,opt,name=render,proto3" json:"render"`
	//是否显示新增按钮
	ShowAdd bool `protobuf:"varint,7,opt,name=showAdd,proto3" json:"showAdd"`
	//点击新增按钮时执行脚本
	AddScript string `protobuf:"bytes,8,opt,name=addScript,proto3" json:"addScript"`
	//新增按钮权限
	AddPermission string `protobuf:"bytes,9,opt,name=addPermission,proto3" json:"addPermission"`
	//是否显示导出按钮
	ShowExport bool `protobuf:"varint,10,opt,name=showExport,proto3" json:"showExport"`
	//导出API接口地址
	ExportUri string `protobuf:"bytes,11,opt,name=exportUri,proto3" json:"exportUri"`
	//是否显示可选框
	RowSelection bool `protobuf:"varint,12,opt,name=rowSelection,proto3" json:"rowSelection"`
	//是否显示批量删除按钮
	ShowBatchDel   bool   `protobuf:"varint,13,opt,name=showBatchDel,proto3" json:"showBatchDel"`
	ShowImport     bool   `protobuf:"varint,14,opt,name=showImport,proto3" json:"showImport"`
	BatchDelUri    string `protobuf:"bytes,15,opt,name=batchDelUri,proto3" json:"batchDelUri"`
	ImportUri      string `protobuf:"bytes,16,opt,name=importUri,proto3" json:"importUri"`
	ImportMulti    bool   `protobuf:"varint,17,opt,name=importMulti,proto3" json:"importMulti"`
	ImportMaxCount int32  `protobuf:"varint,18,opt,name=importMaxCount,proto3" json:"importMaxCount"`
	ImportFormID   string `protobuf:"bytes,19,opt,name=importFormID,proto3" json:"importFormID"`
}

func (x *PageToolBar) Reset() {
	*x = PageToolBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageToolBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageToolBar) ProtoMessage() {}

func (x *PageToolBar) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageToolBar.ProtoReflect.Descriptor instead.
func (*PageToolBar) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{1}
}

func (x *PageToolBar) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageToolBar) GetPageID() string {
	if x != nil {
		return x.PageID
	}
	return ""
}

func (x *PageToolBar) GetFullScreen() bool {
	if x != nil {
		return x.FullScreen
	}
	return false
}

func (x *PageToolBar) GetReload() bool {
	if x != nil {
		return x.Reload
	}
	return false
}

func (x *PageToolBar) GetSetting() bool {
	if x != nil {
		return x.Setting
	}
	return false
}

func (x *PageToolBar) GetRender() string {
	if x != nil {
		return x.Render
	}
	return ""
}

func (x *PageToolBar) GetShowAdd() bool {
	if x != nil {
		return x.ShowAdd
	}
	return false
}

func (x *PageToolBar) GetAddScript() string {
	if x != nil {
		return x.AddScript
	}
	return ""
}

func (x *PageToolBar) GetAddPermission() string {
	if x != nil {
		return x.AddPermission
	}
	return ""
}

func (x *PageToolBar) GetShowExport() bool {
	if x != nil {
		return x.ShowExport
	}
	return false
}

func (x *PageToolBar) GetExportUri() string {
	if x != nil {
		return x.ExportUri
	}
	return ""
}

func (x *PageToolBar) GetRowSelection() bool {
	if x != nil {
		return x.RowSelection
	}
	return false
}

func (x *PageToolBar) GetShowBatchDel() bool {
	if x != nil {
		return x.ShowBatchDel
	}
	return false
}

func (x *PageToolBar) GetShowImport() bool {
	if x != nil {
		return x.ShowImport
	}
	return false
}

func (x *PageToolBar) GetBatchDelUri() string {
	if x != nil {
		return x.BatchDelUri
	}
	return ""
}

func (x *PageToolBar) GetImportUri() string {
	if x != nil {
		return x.ImportUri
	}
	return ""
}

func (x *PageToolBar) GetImportMulti() bool {
	if x != nil {
		return x.ImportMulti
	}
	return false
}

func (x *PageToolBar) GetImportMaxCount() int32 {
	if x != nil {
		return x.ImportMaxCount
	}
	return 0
}

func (x *PageToolBar) GetImportFormID() string {
	if x != nil {
		return x.ImportFormID
	}
	return ""
}

type PageField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PageID         string `protobuf:"bytes,2,opt,name=pageID,proto3" json:"pageID"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	Copyable       bool   `protobuf:"varint,5,opt,name=copyable,proto3" json:"copyable"`
	Ellipsis       bool   `protobuf:"varint,6,opt,name=ellipsis,proto3" json:"ellipsis"`
	RowKey         bool   `protobuf:"varint,7,opt,name=rowKey,proto3" json:"rowKey"`
	Sort           int32  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort"`
	ShowInTable    bool   `protobuf:"varint,9,opt,name=showInTable,proto3" json:"showInTable"`
	ValueEnum      string `protobuf:"bytes,10,opt,name=valueEnum,proto3" json:"valueEnum"`
	Component      string `protobuf:"bytes,11,opt,name=component,proto3" json:"component"`
	ComponentProps string `protobuf:"bytes,12,opt,name=componentProps,proto3" json:"componentProps"`
	DataType       string `protobuf:"bytes,13,opt,name=dataType,proto3" json:"dataType"`
	LabelField     string `protobuf:"bytes,14,opt,name=labelField,proto3" json:"labelField"`
	ValueField     string `protobuf:"bytes,15,opt,name=valueField,proto3" json:"valueField"`
	EnableSort     bool   `protobuf:"varint,16,opt,name=enableSort,proto3" json:"enableSort"`
	Fixed          string `protobuf:"bytes,17,opt,name=fixed,proto3" json:"fixed"`
	//对齐方式
	Align string `protobuf:"bytes,18,opt,name=align,proto3" json:"align"`
	//列宽度
	Width string `protobuf:"bytes,19,opt,name=width,proto3" json:"width"`
}

func (x *PageField) Reset() {
	*x = PageField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageField) ProtoMessage() {}

func (x *PageField) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageField.ProtoReflect.Descriptor instead.
func (*PageField) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{2}
}

func (x *PageField) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageField) GetPageID() string {
	if x != nil {
		return x.PageID
	}
	return ""
}

func (x *PageField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PageField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PageField) GetCopyable() bool {
	if x != nil {
		return x.Copyable
	}
	return false
}

func (x *PageField) GetEllipsis() bool {
	if x != nil {
		return x.Ellipsis
	}
	return false
}

func (x *PageField) GetRowKey() bool {
	if x != nil {
		return x.RowKey
	}
	return false
}

func (x *PageField) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *PageField) GetShowInTable() bool {
	if x != nil {
		return x.ShowInTable
	}
	return false
}

func (x *PageField) GetValueEnum() string {
	if x != nil {
		return x.ValueEnum
	}
	return ""
}

func (x *PageField) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PageField) GetComponentProps() string {
	if x != nil {
		return x.ComponentProps
	}
	return ""
}

func (x *PageField) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *PageField) GetLabelField() string {
	if x != nil {
		return x.LabelField
	}
	return ""
}

func (x *PageField) GetValueField() string {
	if x != nil {
		return x.ValueField
	}
	return ""
}

func (x *PageField) GetEnableSort() bool {
	if x != nil {
		return x.EnableSort
	}
	return false
}

func (x *PageField) GetFixed() string {
	if x != nil {
		return x.Fixed
	}
	return ""
}

func (x *PageField) GetAlign() string {
	if x != nil {
		return x.Align
	}
	return ""
}

func (x *PageField) GetWidth() string {
	if x != nil {
		return x.Width
	}
	return ""
}

type PageButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	PageID   string `protobuf:"bytes,2,opt,name=pageID,proto3" json:"pageID"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	Label    string `protobuf:"bytes,4,opt,name=label,proto3" json:"label"`
	Expanded bool   `protobuf:"varint,5,opt,name=expanded,proto3" json:"expanded"`
	ShowType string `protobuf:"bytes,6,opt,name=showType,proto3" json:"showType"`
	Href     string `protobuf:"bytes,7,opt,name=href,proto3" json:"href"`
	HrefFunc string `protobuf:"bytes,8,opt,name=hrefFunc,proto3" json:"hrefFunc"`
	Script   string `protobuf:"bytes,9,opt,name=script,proto3" json:"script"`
	Index    int32  `protobuf:"varint,10,opt,name=index,proto3" json:"index"`
	//是否启用
	Enable bool `protobuf:"varint,11,opt,name=enable,proto3" json:"enable"`
	//按钮权限
	Permission string `protobuf:"bytes,12,opt,name=permission,proto3" json:"permission"`
	//按钮显示位置，0-显示在列表行 1-在搜索框显示
	ShowPosition int32  `protobuf:"varint,13,opt,name=showPosition,proto3" json:"showPosition"`
	FormID       string `protobuf:"bytes,14,opt,name=formID,proto3" json:"formID"`
	HiddenScript string `protobuf:"bytes,15,opt,name=hiddenScript,proto3" json:"hiddenScript"`
}

func (x *PageButton) Reset() {
	*x = PageButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageButton) ProtoMessage() {}

func (x *PageButton) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageButton.ProtoReflect.Descriptor instead.
func (*PageButton) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{3}
}

func (x *PageButton) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageButton) GetPageID() string {
	if x != nil {
		return x.PageID
	}
	return ""
}

func (x *PageButton) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PageButton) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PageButton) GetExpanded() bool {
	if x != nil {
		return x.Expanded
	}
	return false
}

func (x *PageButton) GetShowType() string {
	if x != nil {
		return x.ShowType
	}
	return ""
}

func (x *PageButton) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *PageButton) GetHrefFunc() string {
	if x != nil {
		return x.HrefFunc
	}
	return ""
}

func (x *PageButton) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *PageButton) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PageButton) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PageButton) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *PageButton) GetShowPosition() int32 {
	if x != nil {
		return x.ShowPosition
	}
	return 0
}

func (x *PageButton) GetFormID() string {
	if x != nil {
		return x.FormID
	}
	return ""
}

func (x *PageButton) GetHiddenScript() string {
	if x != nil {
		return x.HiddenScript
	}
	return ""
}

type QueryPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: uri:"pageIndex" form:"pageIndex"
	PageIndex int64 `protobuf:"varint,1,opt,name=pageIndex,proto3" json:"pageIndex" uri:"pageIndex" form:"pageIndex"`
	// @inject_tag: uri:"pageSize" form:"pageSize"
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize" uri:"pageSize" form:"pageSize"`
	// @inject_tag: uri:"orderField" form:"orderField"
	OrderField string `protobuf:"bytes,3,opt,name=orderField,proto3" json:"orderField" uri:"orderField" form:"orderField"`
	// @inject_tag: uri:"desc" form:"desc"
	Desc bool `protobuf:"varint,4,opt,name=desc,proto3" json:"desc" uri:"desc" form:"desc"`
	// @inject_tag: uri:"name" form:"name"
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" uri:"name" form:"name"`
	// @inject_tag: uri:"enable" form:"enable"
	Enable int32 `protobuf:"varint,6,opt,name=enable,proto3" json:"enable" uri:"enable" form:"enable"`
	// @inject_tag: uri:"type" form:"type"
	Type int32 `protobuf:"varint,7,opt,name=type,proto3" json:"type" uri:"type" form:"type"`
	// @inject_tag: uri:"ids" form:"ids"
	Ids []string `protobuf:"bytes,8,rep,name=ids,proto3" json:"ids" uri:"ids" form:"ids"`
	// @inject_tag: uri:"projectID" form:"projectID"
	ProjectID string `protobuf:"bytes,9,opt,name=projectID,proto3" json:"projectID" uri:"projectID" form:"projectID"`
	// @inject_tag: uri:"tenantID" form:"tenantID"
	TenantID string `protobuf:"bytes,10,opt,name=tenantID,proto3" json:"tenantID" uri:"tenantID" form:"tenantID"`
	// 包含基础页面配置数据,例如用户管理、角色管理等
	// @inject_tag: uri:"inclusiveBasic" form:"inclusiveBasic"
	InclusiveBasic bool `protobuf:"varint,11,opt,name=inclusiveBasic,proto3" json:"inclusiveBasic" uri:"inclusiveBasic" form:"inclusiveBasic"`
	// 是否子表单 0-查询全部 1-查询子表单 2-查询父表单
	// @inject_tag: uri:"isChild" form:"isChild"
	IsChild int32 `protobuf:"varint,12,opt,name=isChild,proto3" json:"isChild" uri:"isChild" form:"isChild"`
}

func (x *QueryPageRequest) Reset() {
	*x = QueryPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPageRequest) ProtoMessage() {}

func (x *QueryPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPageRequest.ProtoReflect.Descriptor instead.
func (*QueryPageRequest) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPageRequest) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *QueryPageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryPageRequest) GetOrderField() string {
	if x != nil {
		return x.OrderField
	}
	return ""
}

func (x *QueryPageRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *QueryPageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryPageRequest) GetEnable() int32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *QueryPageRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *QueryPageRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryPageRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *QueryPageRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *QueryPageRequest) GetInclusiveBasic() bool {
	if x != nil {
		return x.InclusiveBasic
	}
	return false
}

func (x *QueryPageRequest) GetIsChild() int32 {
	if x != nil {
		return x.IsChild
	}
	return 0
}

type QueryPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code        `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    []*PageInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
	Pages   int64       `protobuf:"varint,4,opt,name=pages,proto3" json:"pages"`
	Records int64       `protobuf:"varint,5,opt,name=records,proto3" json:"records"`
	Total   int64       `protobuf:"varint,6,opt,name=total,proto3" json:"total"`
}

func (x *QueryPageResponse) Reset() {
	*x = QueryPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPageResponse) ProtoMessage() {}

func (x *QueryPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPageResponse.ProtoReflect.Descriptor instead.
func (*QueryPageResponse) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{5}
}

func (x *QueryPageResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *QueryPageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryPageResponse) GetData() []*PageInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryPageResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *QueryPageResponse) GetRecords() int64 {
	if x != nil {
		return x.Records
	}
	return 0
}

func (x *QueryPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAllPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code        `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    []*PageInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data"`
}

func (x *GetAllPageResponse) Reset() {
	*x = GetAllPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPageResponse) ProtoMessage() {}

func (x *GetAllPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPageResponse.ProtoReflect.Descriptor instead.
func (*GetAllPageResponse) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllPageResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *GetAllPageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAllPageResponse) GetData() []*PageInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPageDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code      `protobuf:"varint,1,opt,name=code,proto3,enum=curd.Code" json:"code"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	Data    *PageInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (x *GetPageDetailResponse) Reset() {
	*x = GetPageDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_page_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageDetailResponse) ProtoMessage() {}

func (x *GetPageDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_page_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPageDetailResponse) Descriptor() ([]byte, []int) {
	return file_page_proto_rawDescGZIP(), []int{7}
}

func (x *GetPageDetailResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_None
}

func (x *GetPageDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPageDetailResponse) GetData() *PageInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_page_proto protoreflect.FileDescriptor

var file_page_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x75,
	0x72, 0x64, 0x1a, 0x11, 0x63, 0x75, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x1b, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x42, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75,
	0x72, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x52, 0x07,
	0x74, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61,
	0x72, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x72, 0x64,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x75,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x47, 0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4d, 0x75, 0x73, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x75,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x22, 0xd1,
	0x04, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x55, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x22, 0x85, 0x04, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x77, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x72, 0x65, 0x66, 0x46, 0x75, 0x6e,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x72, 0x65, 0x66, 0x46, 0x75, 0x6e,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63,
	0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x72, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc8, 0x03,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x2e,
	0x63, 0x75, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x14, 0x2e,
	0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x75, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x75, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x75, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x43, 0x6f, 0x70,
	0x79, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x75,
	0x72, 0x64, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x0a, 0x0d, 0x63, 0x6e, 0x2e, 0x61,
	0x74, 0x61, 0x6c, 0x69, 0x2e, 0x63, 0x75, 0x72, 0x64, 0x42, 0x09, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x63, 0x75, 0x72, 0x64, 0xa2,
	0x02, 0x07, 0x50, 0x41, 0x47, 0x45, 0x53, 0x52, 0x56, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_page_proto_rawDescOnce sync.Once
	file_page_proto_rawDescData = file_page_proto_rawDesc
)

func file_page_proto_rawDescGZIP() []byte {
	file_page_proto_rawDescOnce.Do(func() {
		file_page_proto_rawDescData = protoimpl.X.CompressGZIP(file_page_proto_rawDescData)
	})
	return file_page_proto_rawDescData
}

var file_page_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_page_proto_goTypes = []interface{}{
	(*PageInfo)(nil),              // 0: curd.PageInfo
	(*PageToolBar)(nil),           // 1: curd.PageToolBar
	(*PageField)(nil),             // 2: curd.PageField
	(*PageButton)(nil),            // 3: curd.PageButton
	(*QueryPageRequest)(nil),      // 4: curd.QueryPageRequest
	(*QueryPageResponse)(nil),     // 5: curd.QueryPageResponse
	(*GetAllPageResponse)(nil),    // 6: curd.GetAllPageResponse
	(*GetPageDetailResponse)(nil), // 7: curd.GetPageDetailResponse
	(Code)(0),                     // 8: curd.Code
	(*DelRequest)(nil),            // 9: curd.DelRequest
	(*GetDetailRequest)(nil),      // 10: curd.GetDetailRequest
	(*EnableRequest)(nil),         // 11: curd.EnableRequest
	(*CommonResponse)(nil),        // 12: curd.CommonResponse
}
var file_page_proto_depIdxs = []int32{
	1,  // 0: curd.PageInfo.toolBar:type_name -> curd.PageToolBar
	2,  // 1: curd.PageInfo.fields:type_name -> curd.PageField
	3,  // 2: curd.PageInfo.buttons:type_name -> curd.PageButton
	8,  // 3: curd.QueryPageResponse.code:type_name -> curd.Code
	0,  // 4: curd.QueryPageResponse.data:type_name -> curd.PageInfo
	8,  // 5: curd.GetAllPageResponse.code:type_name -> curd.Code
	0,  // 6: curd.GetAllPageResponse.data:type_name -> curd.PageInfo
	8,  // 7: curd.GetPageDetailResponse.code:type_name -> curd.Code
	0,  // 8: curd.GetPageDetailResponse.data:type_name -> curd.PageInfo
	0,  // 9: curd.Page.Add:input_type -> curd.PageInfo
	0,  // 10: curd.Page.Update:input_type -> curd.PageInfo
	9,  // 11: curd.Page.Delete:input_type -> curd.DelRequest
	4,  // 12: curd.Page.Query:input_type -> curd.QueryPageRequest
	4,  // 13: curd.Page.GetAll:input_type -> curd.QueryPageRequest
	10, // 14: curd.Page.GetDetail:input_type -> curd.GetDetailRequest
	10, // 15: curd.Page.Copy:input_type -> curd.GetDetailRequest
	11, // 16: curd.Page.Enable:input_type -> curd.EnableRequest
	12, // 17: curd.Page.Add:output_type -> curd.CommonResponse
	12, // 18: curd.Page.Update:output_type -> curd.CommonResponse
	12, // 19: curd.Page.Delete:output_type -> curd.CommonResponse
	5,  // 20: curd.Page.Query:output_type -> curd.QueryPageResponse
	6,  // 21: curd.Page.GetAll:output_type -> curd.GetAllPageResponse
	7,  // 22: curd.Page.GetDetail:output_type -> curd.GetPageDetailResponse
	12, // 23: curd.Page.Copy:output_type -> curd.CommonResponse
	12, // 24: curd.Page.Enable:output_type -> curd.CommonResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_page_proto_init() }
func file_page_proto_init() {
	if File_page_proto != nil {
		return
	}
	file_curd_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_page_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageToolBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_page_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPageDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_page_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_page_proto_goTypes,
		DependencyIndexes: file_page_proto_depIdxs,
		MessageInfos:      file_page_proto_msgTypes,
	}.Build()
	File_page_proto = out.File
	file_page_proto_rawDesc = nil
	file_page_proto_goTypes = nil
	file_page_proto_depIdxs = nil
}
